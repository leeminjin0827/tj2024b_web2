[ IOC ] : (Inversion of Control) 제어의 역전
    1. 정의 : 객체의 생성(new) 및 관리의 제어권을 개발자가 아닌 스프링 프레임워크가 담당한다.
    2. 스프링에서는 컨테이너 가 이를 대신 한다.
    즉] 객체의 생성과 관리를 스프링이 한다.
    3. 컨테이너 등록하는 방법 : 클래스 위에 빈 등록 어노테이션 사용한다.
        @Component
        @controller @RestController @Service @Repository @Mapper 등등 : 다른 기능들과 포함하여 제공한다.

[ DI ] : (Dependency Injection) 의존성 주입
    1. 정의 : 객체를 직접 생성하지 않고 외부(스프링 컨테이너)로 부터 주입받도록 하는 방법
    2. 객체들간의 결합도를 낮추고 유지보수성을 샹항한다.
    3. 방법 @Autowired
        (1) 필드(멤버변수)에 주입
        @Autowired 클래스명 변수명;

        (2) 생성자 에 주입 *권장 , final
        final 클래스명 변수명;
        @Autowired
        public 클래스명( 클래스명 변수명 ){
            this.변수명 = 매개변수명;
        }

        (3) Setter 를 이용한 주입
        클래스명 변수명;
        @Autowired
        public void setXXX( 클래스명 매개변수명 ){
            this.변수명 = 매개변수명;
        }
    4. 핵심적인 오류
        1. Consider defining a bean of type 'XXXX' in your configuration.
            -> : 빈 주입이 안된다 뜻 . 주입 할 빈 이 스프링 컨테이너에 없이 때문에
        2. The dependencies of some of the beans in the application context form a
            -> : 서로 다른 계층들이 서로 호출하면 순환참조에 오류가 발생한다.
                Controller ---> Service
                Service ---> Controller

    * final : 필드/변수에 초기화 이후 수정 불가능한 상태 , 상수 만들때 사용되는 키워드
        -> final 필드/변수는 수정이 불가능 하므로 초기값이 필수이다.
        Autowired final MvcService mvcService; = X
        이유는 Autowired 는 애초에 = new 기능을 하기 때문(인스턴스 생성)
    * final static : 전역변수의 상수

[ 정리 ] : 스프링은 IOC 이용하여 객체를 대신 생성 과 관리 하고 DI를 이용하여 객체를 주입한다.
Description 읽는 것 중요



